import os
import urllib.parse
import tempfile
import requests
from datetime import datetime, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build

# Constants
NPS_API_KEY = os.environ.get('NPS_API_KEY')
NPS_API_BASE_URL = "https://developer.nps.gov/api/v1"
WEATHER_API_BASE_URL = "https://api.weather.gov"
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SPREADSHEET_ID = os.environ.get('SPREADSHEET_ID')

# Google OAuth Client Configuration
CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
SERVICE_ACCOUNT_DATA = os.environ.get('GOOGLE_SERVICE_ACCOUNT_DATA')

print(f"NPS_API_KEY: {os.environ.get('NPS_API_KEY')}")
print(f"SPREADSHEET_ID: {os.environ.get('SPREADSHEET_ID')}")


def get_parks(filter_type, filter_value):
    url = f'{NPS_API_BASE_URL}/parks?api_key={NPS_API_KEY}'
    
    if filter_type == 'state':
        url += f'&stateCode={filter_value}'
    elif filter_type == 'activities':
        url += f'&q={filter_value}'
    elif filter_type == 'historical_relevance':
        url += f'&q={filter_value}'
    
    response = requests.get(url)
    if response.status_code == 200:
        parks = response.json().get('data', [])
        return parks[:5]  # Return only the first 5 parks
    else:
        print(f'Error fetching parks: {response.status_code} - {response.text}')
        return []

def get_weather(lat, lon, date):
    url = f"{WEATHER_API_BASE_URL}/points/{lat},{lon}"
    response = requests.get(url)
    if response.status_code == 200:
        forecast_url = response.json()['properties']['forecast']
        forecast_response = requests.get(forecast_url)
        if forecast_response.status_code == 200:
            forecasts = forecast_response.json()['properties']['periods']
            for forecast in forecasts:
                if forecast['startTime'].split('T')[0] == date:
                    return {
                        'high': forecast['temperature'],
                        'low': forecast['temperature'],  # Assuming the low is the same as high for simplicity
                        'conditions': forecast['shortForecast'],
                        'wind_speed': forecast['windSpeed'],
                        'humidity': 50  # Humidity is not provided, using a placeholder
                    }
    return None

def sort_parks(parks, sort_method):
    if sort_method == "sunniest":
        return sorted(parks, key=lambda x: x.get('weather', {}).get('conditions', '') == 'Sunny', reverse=True)
    elif sort_method == "most_activities":
        return sorted(parks, key=lambda x: len(x.get('activities', [])), reverse=True)
    # Add more sorting methods as needed
    return parks

def generate_itinerary(parks):
    itinerary = []
    start_date = datetime.now().date()
    for i, park in enumerate(parks):
        visit_date = start_date + timedelta(days=i)
        itinerary.append({
            'order': i + 1,
            'name': park['fullName'],
            'state': park['states'],
            'visit_date': visit_date.strftime('%Y-%m-%d'),
            'forecast_high': park['weather']['high'],
            'forecast_low': park['weather']['low'],
            'weather': park['weather']['conditions'],
            'wind_speed': park['weather']['wind_speed'],
            'nps_link': park['url'],
            'directions': park['directionsUrl']
        })
    return itinerary

def get_sheets_service():
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

    if not SERVICE_ACCOUNT_DATA:
        print("GOOGLE_SERVICE_ACCOUNT_DATA environment variable is not set")
        return None

    # Write service account data to a temporary file
    with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp_file:
        temp_file.write(SERVICE_ACCOUNT_DATA)
        temp_file_path = temp_file.name

    try:
        creds = service_account.Credentials.from_service_account_file(
            temp_file_path, scopes=SCOPES)
        service = build('sheets', 'v4', credentials=creds)
        return service
    except Exception as e:
        print(f"An error occurred in get_sheets_service: {e}")
    finally:
        # Clean up the temporary file
        os.unlink(temp_file_path)

    return None

def generate_google_maps_link(itinerary):
    base_url = "https://www.google.com/maps/dir/"
    waypoints = [f"{park['name']}, {park['state']}" for park in itinerary]
    encoded_waypoints = [urllib.parse.quote(wp) for wp in waypoints]
    return base_url + "/".join(encoded_waypoints)

def write_to_google_sheet(itinerary):
    service = get_sheets_service()
    if service is None:
        print("Failed to obtain Google Sheets service. Check your credentials and permissions.")
        return

    sheet = service.spreadsheets()
    
    # Find the row to update (for example, based on the park name)
    park_to_update = "Yosemite National Park"
    row_to_update = None
    
    # First, read the existing data
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range="Sheet1!A:J").execute()
    existing_data = result.get('values', [])
    
    for i, row in enumerate(existing_data):
        if row and row[1] == park_to_update:
            row_to_update = i + 1
            break
    
    if row_to_update:
        range_name = f'Sheet1!A{row_to_update}:J{row_to_update}'
        
        # Prepare the data for the specific park
        park = next((p for p in itinerary if p['name'] == park_to_update), None)
        if park:
            values = [[
                park['order'], park['name'], park['state'], park['visit_date'],
                park['forecast_high'], park['forecast_low'], park['weather'],
                park['wind_speed'], park['nps_link'], park['directions']
            ]]
            
            body = {'values': values}
            result = sheet.values().update(
                spreadsheetId=SPREADSHEET_ID, range=range_name,
                valueInputOption='USER_ENTERED', body=body).execute()
            
            print(f"{result.get('updatedCells')} cells updated.")
        else:
            print(f"Park {park_to_update} not found in itinerary.")
    else:
        print(f"Park {park_to_update} not found in existing data.")

def main():
    parks = get_parks("state", "CA")
    
    for park in parks:
        lat, lon = park['latitude'], park['longitude']
        visit_date = (datetime.now() + timedelta(days=parks.index(park))).strftime('%Y-%m-%d')
        park['weather'] = get_weather(lat, lon, visit_date)
    
    sorted_parks = sort_parks(parks, "sunniest")
    itinerary = generate_itinerary(sorted_parks)
    write_to_google_sheet(itinerary)

if __name__ == "__main__":
    main()
